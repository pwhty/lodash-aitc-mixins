/**
 * A collection of mixins for lo-dash that expand lo-dash functions with deep alternatives that crawl the collection
 * recursively on deeper levels.
 *
 * The functions have the same signature as their original pendants and as such as swappable without other changes.
 *
 * @license
 * Copyright 2014 Patricius Albu
 */

/**
 * Creates an array by running each element in the collection through the callback. If an element is a collection
 * itself, then this function is called recursively on that collection. The recursivity ends when an element is not a
 * collection. The callback is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).
 *
 * If a property name is provided for `callback` the created "_.pluck" style callback will return the property value of
 * the given element.
 *
 * If an object is provided for `callback` the created "_.where" style callback will return `true` for elements that
 * have the properties of the given object, else `false`.
 *
 * @static
 * @memberOf _
 * @alias
 * @category Collections
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function|Object|string} [callback=identity] The function called
 *  per iteration. If a property name or object is provided it will be used
 *  to create a "_.pluck" or "_.where" style callback, respectively.
 * @param {*} [thisArg] The `this` binding of `callback`.
 * @returns {Array} Returns a new array of the results of each `callback` execution.
 * @example
 *
 * _.deepMap([1, 2, [3]], function(num) { return num * 3; });
 * // => [3, 6, [9]]
 *
 * _.map({ 'one': 1, 'two': 2, 'three': [3] }, function(num) { return num * 3; });
 * // => [3, 6, [9]] (property order is not guaranteed across environments)
 *
 * var characters = [
 *   { 'name': 'barney', 'age': 36 },
 *   [{ 'name': 'fred',   'age': 40 }]
 * ];
 *
 * // using "_.pluck" callback shorthand
 * _.map(characters, 'name');
 * // => ['barney', ['fred']]
 */
_.mixin({'deepMap' : function(collection, callback, thisArg){
    callback = _.createCallback(callback, thisArg, 3);
    return _.map(collection, function (value, index) {
        // if it's an array, map recursively inside it
        if(_.isArray(value))
            return _.deepMap(value, callback);
        // if it's a number, map it to the requested object {x: index, y: value}
        else
            return callback(value, index);
    });
}});

/**
 * Creates an object with the same keys as `object` and values generated by running each own enumerable property of
 * `object` through the callback if they're not an array or an object themselves. If they are, the function calls itself
 * recursevely. The callback is bound to `thisArg` and invoked with three arguments; (value, key, object).
 *
 * WARNING: The following two features (_.pluck and _.where styles) are not working as described. They should kick in
 *          only on element children but continue the recursion on array or object children. As such, the second example
 *          does not work as stated.
 *
 * If a property name is provided for `callback` the created "_.pluck" style
 * callback will return the property value of the given element.
 *
 * If an object is provided for `callback` the created "_.where" style callback
 * will return `true` for elements that have the properties of the given object,
 * else `false`.
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {Object} object The object to iterate over.
 * @param {Function|Object|string} [callback=identity] The function called
 *  per iteration. If a property name or object is provided it will be used
 *  to create a "_.pluck" or "_.where" style callback, respectively.
 * @param {*} [thisArg] The `this` binding of `callback`.
 * @returns {Array} Returns a new object with values of the results of each `callback` execution.
 * @example
 *
 * _.deepMapValues({ 'a': 1, 'b': 2, 'c': {'d': 3, 'e': 4}} , function(num) { return num * 3; });
 * // => { 'a': 3, 'b': 6, 'c': {'d': 9, 'e': 16 }}
 *
 * var characters = {
 *   'fred': { 'name': 'fred', 'age': 40 },
 *   'pebbles': { 'name': 'pebbles', 'age': 1 }
 * };
 *
 * // using "_.pluck" callback shorthand
 * _.mapValues(characters, 'age');
 * // => { 'fred': 40, 'pebbles': 1 }
 */
_.mixin({'deepMapValues' : function(collection, callback, thisArg){
    callback = _.createCallback(callback, thisArg, 3);
    return _.mapValues(collection, function (value, key, collection) {
        // if it's an array or object, map recursively inside it
        if(_.isArray(value) || _.isObject(value)){
            return _.deepMapValues(value, callback);
        }
        // if it's a number, run it through the callback
        else{
            return callback(value, key, collection);
        }
    });
}});

/**
 * Reduces a collection to a value which is the accumulated result of running
 * each element in the collection through the callback, where each successive
 * callback execution consumes the return value of the previous execution. If
 * `accumulator` is not provided the first element of the collection will be
 * used as the initial `accumulator` value. The callback is bound to `thisArg`
 * and invoked with four arguments; (accumulator, value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @alias foldl, inject
 * @category Collections
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} [callback=identity] The function called per iteration.
 * @param {*} [accumulator] Initial value of the accumulator.
 * @param {*} [thisArg] The `this` binding of `callback`.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * var sum = _.reduce([1, 2, [3, {'a': 4}, 5], 6], function(sum, num) {
 *   return sum + num;
 * });
 * // => 21
 *
 * var mapped = _.deepReduce({ 'a': 1, 'b': 2, 'c': {'d': 3, 'e': 4 }}, function(result, num, key) {
 *   result[key] = num * 3;
 *   return result;
 * }, {});
 * // => { 'a': 3, 'b': 6, 'd': 12, 'e': 25 }
 * NOTE: just like the original _reduce() function, this will only work on end nodes (leafs). This is why element 'c'
 *       doesn't appear in the result. Its elements cannot be computed times 3. In order to handle this, one would need
 *       a second callback that is called when not on a leaf.
 */
_.mixin({'deepReduce':function reduce(collection, callback, accumulator, thisArg) {
    // _.reduce() handles missing accumulator, so make sure it can be passed to it
    accumulator = accumulator || null;
    callback = _.createCallback(callback, thisArg, 4);

    return _.reduce(collection, function (accumulator, value, key, collection) {
        // if it's an array or object, reduce recursively inside it
        if(_.isArray(value) || _.isObject(value)){
            return _.deepReduce(value, callback, accumulator, thisArg);
        }
        // if it's an element, run it through the callback
        else{
            return callback(accumulator, value, key, collection);
        }
    }, accumulator);
}});